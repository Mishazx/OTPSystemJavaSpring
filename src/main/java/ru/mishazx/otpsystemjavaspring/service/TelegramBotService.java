package ru.mishazx.otpsystemjavaspring.service;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.mishazx.otpsystemjavaspring.model.User;
import ru.mishazx.otpsystemjavaspring.model.otp.OTPCode;
import ru.mishazx.otpsystemjavaspring.repository.UserRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@Service
@Slf4j
public class TelegramBotService extends TelegramLongPollingBot {

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    private final TelegramLinkService telegramLinkService;
    private final OTPService otpService;

    private final UserRepository userRepository;

    private final Map<Long, String> activeOTPCodes = new ConcurrentHashMap<>();
    private final Map<String, Long> linkTokens = new ConcurrentHashMap<>();

    public TelegramBotService(
            TelegramLinkService telegramLinkService,
            OTPService otpService,
            UserRepository userRepository,
            @Value("${telegram.bot.token}") String botToken) {
        super(botToken);
        this.telegramLinkService = telegramLinkService;
        this.otpService = otpService;
        this.userRepository = userRepository;
        this.botToken = botToken;
    }

    @PostConstruct
    public void initCommands() {
        try {
            List<BotCommand> commandList = new ArrayList<>();
            commandList.add(new BotCommand("/start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"));
            commandList.add(new BotCommand("/code", "–ü–æ–ª—É—á–∏—Ç—å OTP-–∫–æ–¥"));
            commandList.add(new BotCommand("/link", "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"));
            commandList.add(new BotCommand("/help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"));

            execute(new SetMyCommands(commandList, new BotCommandScopeDefault(), null));
            log.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã");
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞", e);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            if (messageText.startsWith("/start")) {
                handleStartCommand(messageText, chatId);
            } else if (messageText.startsWith("/link_")) {
                String token = messageText.substring(6);
                linkAccount(chatId, token);
            } else if (messageText.startsWith("/link") || messageText.equals("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")) {
                handleLinkCommand(chatId);
            } else if (messageText.startsWith("/unlink") || messageText.equals("–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")) {
                handleUnlinkCommand(chatId);
            } else if (messageText.startsWith("/code") || messageText.equals("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥")) {
                handleSendCode(chatId);
            } else if (messageText.startsWith("/help") || messageText.equals("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å")) {
                handleHelpCommand(messageText, chatId);
            }
        }
    }

    private void handleSendCode(Long chatId) {
        String otpCode = otpService.generateOTP();
        activeOTPCodes.put(chatId, otpCode);

        SendMessage message = createMessageWithKeyboard(chatId,
                "üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: *" + otpCode + "*\n\n" +
                        "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç. " +
                        "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");

        message.enableMarkdown(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP-–∫–æ–¥–∞", e);
        }
    }

    private void handleHelpCommand(String messageText, Long chatId) {
        SendMessage message = createMessageWithKeyboard(chatId, """
                ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:
                1Ô∏è‚É£ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /code
                2Ô∏è‚É£ –ï—Å–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram, —Å–∏—Å—Ç–µ–º–∞ —Å–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∫–æ–¥—ã
                3Ô∏è‚É£ –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                4Ô∏è‚É£ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
                """);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    private void handleLinkCommand(Long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        boolean isLinked = userRepository.findByTelegramChatId(chatId).isPresent();
        
        if (isLinked) {
            SendMessage message = createMessageWithKeyboard(chatId, 
                "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unlink –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.");
            
            try {
                execute(message);
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏", e);
            }
            return;
        }
        
        String token = UUID.randomUUID().toString();

        log.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è chatId: {}: {}", chatId, token);
        for (Map.Entry<String, Long> entry : linkTokens.entrySet()) {
            if (entry.getValue().equals(chatId)) {
                log.info("–£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è chatId {}: {}", chatId, entry.getKey());
                linkTokens.remove(entry.getKey());
            }
        }

        sendLinkCode(chatId, token);
    }

    private void handleUnlinkCommand(Long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        User user = userRepository.findByTelegramChatId(chatId).orElse(null);
        
        if (user == null) {
            SendMessage message = createMessageWithKeyboard(chatId, 
                "‚ùó –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.");
            
            try {
                execute(message);
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏", e);
            }
            return;
        }
        
        // –û—Ç–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        user.setTelegramChatId(null);
        userRepository.save(user);
        
        SendMessage message = createMessageWithKeyboard(chatId,
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç Telegram.\n" +
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.");
        
        try {
            execute(message);
            log.info("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç Telegram –¥–ª—è chatId: {}", chatId);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞", e);
        }
    }

    private void handleStartCommand(String messageText, Long chatId) {
        String[] parts = messageText.split(" ", 2);

        if (parts.length > 1 && parts[1].startsWith("link_")) {
            String token = parts[1].substring(5);
            linkAccount(chatId, token);
        } else {
            sendWelcomeMessage(chatId);
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        SendMessage message = createMessageWithKeyboard(chatId,
                """
                        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å OTP-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! ‚öôÔ∏è

                        –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:

                            –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥¬ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ OTP. üîë
                        –ü—Ä–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∫–æ–¥—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Å–∞–π—Ç–∞. üîÑ
                        –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª. ‚ÑπÔ∏è
                        """);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    private SendMessage createMessageWithKeyboard(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        boolean isLinked = userRepository.findByTelegramChatId(chatId).isPresent();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" –∏–ª–∏ "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if (isLinked) {
            row1.add(new KeyboardButton("–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"));
        } else {
            row1.add(new KeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"));
        }

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"));

        keyboard.add(row1);
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        return message;
    }

    private void linkAccount(long chatId, String token) {
        boolean success = telegramLinkService.linkTelegramAccount(token, chatId);

        if (success) {
            SendMessage message = createMessageWithKeyboard(chatId,
                    """
                            ‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.
                            –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç.

                            –ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥—ã.
                            """);

            try {
                execute(message);
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ", e);
            }
        } else {
            String newToken = UUID.randomUUID().toString();
            sendLinkCode(chatId, newToken);

            SendMessage message = createMessageWithKeyboard(chatId,
                    "‚ÑπÔ∏è –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã—à–µ, –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ.");

            try {
                execute(message);
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ", e);
            }
        }
    }

    public void sendLinkCode(long chatId, String token) {
        linkTokens.put(token, chatId);

        SendMessage message = createMessageWithKeyboard(chatId,
                "üîë –í–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: *" + token + "*\n\n" +
                        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –≤ –ø–æ–ª–µ '–ö–æ–¥ –∏–∑ Telegram'.\n" +
                        "‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏.");

        message.enableMarkdown(true);

        try {
            execute(message);
            log.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è chatId: {} —Å —Ç–æ–∫–µ–Ω–æ–º: {}", chatId, token);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏", e);
        }
    }

    public boolean sendOTPForUser(Long chatId) {
        try {
            User user = userRepository.findByTelegramChatId(chatId).orElse(null);
            if (user == null) {
                log.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId {} –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId);
                return false;
            }

            OTPCode otpCode = otpService.generateTelegramOtpWithoutSending(user, String.valueOf(chatId));

            String code = otpCode.getCode();

            activeOTPCodes.put(chatId, code);

            SendMessage message = createMessageWithKeyboard(chatId,
                    "üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: *" + code + "*\n\n" +
                            "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç. " +
                            "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");

            message.enableMarkdown(true);

            try {
                execute(message);
                log.info("OTP –∫–æ–¥ {} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram", code);
                return true;
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º: {}", e.getMessage(), e);
                return false;
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", e.getMessage(), e);
            return false;
        }
    }

    @Override
    public String getBotUsername() {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return botUsername;
    }

    public Long getChatIdByToken(String token) {
        log.info("–ü–æ–∏—Å–∫ chatId –ø–æ —Ç–æ–∫–µ–Ω—É: {}", token);
        Long chatId = linkTokens.get(token);

        if (chatId != null) {
            log.info("–ù–∞–π–¥–µ–Ω chatId: {} –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {}", chatId, token);
        } else {
            log.warn("ChatId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {}. –¢–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {}", token, linkTokens.keySet());
        }

        return chatId;
    }

    public void removeToken(String token) {
        if (linkTokens.containsKey(token)) {
            Long chatId = linkTokens.remove(token);
            log.info("–¢–æ–∫–µ–Ω {} —É–¥–∞–ª–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è chatId {}", token, chatId);
        } else {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω: {}", token);
        }
    }

    public Map<String, Long> getActiveLinkTokens() {
        log.info("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {}", linkTokens);
        return linkTokens;
    }

}
